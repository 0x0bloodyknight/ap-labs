openapi: 3.0.1
info:
  title: Notes
  description: "Simple notes API"
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://localhost/api/v1
  - url: http://localhost/api/v1
tags:
  - name: note
    description: Everything about your Notes
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: history
paths:
  /note:
    post:
      tags:
        - note
      summary: Add a new note
      operationId: addNote
      requestBody:
        description: Note object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Note"
        required: true
      responses:
        200:
          description: Successfully created
          content:
            application/json:
              schema:
                type: number
                format: int64
        405:
          description: Invalid input
          content: {}
      security:
        - notes_auth:
            - write:notes
      x-codegen-request-body-name: body

  /note/{noteId}:
    get:
      tags:
        - note
      summary: Find note by ID
      description: Returns a single note
      operationId: getNoteById
      parameters:
        - name: noteId
          in: path
          description: ID of note to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Note not found
          content: {}
      security:
        - notes_auth:
            - read:notes
    put:
      tags:
        - note
      summary: Updates a note with form data by ID
      operationId: updateNoteWithForm
      parameters:
        - name: noteId
          in: path
          description: ID of note that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                text:
                  type: string
                  description: Updated text of the note
                tags:
                  type: array
                  items:
                    $ref: "#/components/schemas/Tag"
                  description: Updated tags of the note
                editors:
                  type: array
                  items:
                    $ref: "#/components/schemas/User"
                  description: Updated editors of the note
      responses:
        200:
          description: Successfully updated
          content: {}
        403:
          description: You can't modify this note
          content: {}
        405:
          description: Invalid input
          content: {}
      security:
        - notes_auth:
            - write:notes
    delete:
      tags:
        - note
      summary: Deletes a note by ID
      operationId: deleteNote
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: noteId
          in: path
          description: Note id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        403:
          description: You can't modify this note
          content: {}
        404:
          description: Note not found
          content: {}
      security:
        - notes_auth:
            - write:notes
            - read:notes
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                username:
                  type: string
                  description: Updated tags of the note
                firstName:
                  type: string
                  description: Updated editors of the note
                lastName:
                  type: string
                  description: Updated lastName of the user
                email:
                  type: string
                  description: Updated email of the user
                password:
                  type: string
                  description: Updated password of the user
                phone:
                  type: string
                  description: Updated phone of the user
        required: true
      responses:
        200:
          description: Successfully created
          content:
            application/json:
              schema:
                type: number
                format: int64
        405:
          description: Invalid input
          content: {}

      x-codegen-request-body-name: body
    put:
      tags:
        - user
      summary: Update an existing user
      operationId: updateUser
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                username:
                  type: string
                  description: Updated tags of the note
                firstName:
                  type: string
                  description: Updated editors of the note
                lastName:
                  type: string
                  description: Updated lastName of the user
                email:
                  type: string
                  description: Updated email of the user
                password:
                  type: string
                  description: Updated password of the user
                phone:
                  type: string
                  description: Updated phone of the user
        required: true
      responses:
        200:
          description: Successfully updated
          content: {}
        400:
          description: Invalid Username supplied
          content: {}
        406:
          description: Invalid user field supplied
          content: {}
        403:
          description: Not authorized
          content: {}
        500:
          description: Cannot update user field
      security:
        - notes_auth:
            - modify:user
    delete:
      tags:
        - user
      summary: Delete existing user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      responses:
        200:
          description: Successfully deleted
          content: {}
        403:
          description: Insufficient permissions
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - notes_auth:
            - delete:user
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}

  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
  /user/{username}/stats:
    get:
      tags:
        - user
      summary: Get user stats by user name
      operationId: getUserStats
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stats"
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
  /user/{username}/notes:
    get:
      tags:
        - user
      summary: Get user notes by user name
      operationId: getUserNotes
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Note"
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - notes_auth:
            - read:notes

  /history/{noteId}:
    get:
      tags:
        - history
      summary: Get note history by ID
      description: Returns a list of edits for note
      operationId: getNoteHistoryById
      parameters:
        - name: noteId
          in: path
          description: ID of note to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Edit"
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Note not found
          content: {}
      security:
        - notes_auth:
            - read:notes
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Note:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
          minLength: 1
          maxLength: 404
          example: doggie
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        editors:
          type: array
          items:
            type: integer
            format: int64

      xml:
        name: Note
    Edit:
      required:
        - noteId
      type: object
      properties:
        noteId:
          type: integer
          format: int64
        oldText:
          type: string
          minLength: 1
          maxLength: 404
          example: doggie
        newText:
          type: string
          minLength: 1
          maxLength: 404
          example: cat
        editor:
          items:
            type: integer
            format: int64
        changeDate:
          type: string
          format: date-time

      xml:
        name: Note
    Stats:
      required:
        - noteId
      type: object
      properties:
        notesCreated:
          type: integer
          format: int64
          example: 1
  securitySchemes:
    notes_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://notestore.swagger.io/oauth/dialog
          scopes:
            read:user: read user information
            delete:user: delete user
            change:user: modify user information
            write:notes: modify notes in your account
            read:notes: read your notes
